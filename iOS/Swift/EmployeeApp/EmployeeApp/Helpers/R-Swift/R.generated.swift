//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 9 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `employee-100`.
    var employee100: RswiftResources.ImageResource { .init(name: "employee-100", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `employees`.
    var employees: RswiftResources.ImageResource { .init(name: "employees", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-add`.
    var icAdd: RswiftResources.ImageResource { .init(name: "ic-add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-back`.
    var icBack: RswiftResources.ImageResource { .init(name: "ic-back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic-list-options`.
    var icListOptions: RswiftResources.ImageResource { .init(name: "ic-list-options", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info-overlay-profpic`.
    var infoOverlayProfpic: RswiftResources.ImageResource { .init(name: "info-overlay-profpic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `listing-img-1`.
    var listingImg1: RswiftResources.ImageResource { .init(name: "listing-img-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo-1902`.
    var logo1902: RswiftResources.ImageResource { .init(name: "logo-1902", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `portfolio-48`.
    var portfolio48: RswiftResources.ImageResource { .init(name: "portfolio-48", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `PostTableCell`.
    var postTableCell: RswiftResources.NibReferenceReuseIdentifier<PostTableCell, PostTableCell> { .init(name: "PostTableCell", bundle: bundle, identifier: "PostTableCell") }

    func validate() throws {
      if UIKit.UIImage(named: "listing-img-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'listing-img-1' is used in nib 'PostTableCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `PostTableCell`.
    let postTableCell: RswiftResources.ReuseIdentifier<PostTableCell> = .init(identifier: "PostTableCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var addOrEditPost: addOrEditPost { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var login: login { .init(bundle: bundle) }
    var postDetails: postDetails { .init(bundle: bundle) }
    var posts: posts { .init(bundle: bundle) }
    var signUp: signUp { .init(bundle: bundle) }

    func addOrEditPost(bundle: Foundation.Bundle) -> addOrEditPost {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func login(bundle: Foundation.Bundle) -> login {
      .init(bundle: bundle)
    }
    func postDetails(bundle: Foundation.Bundle) -> postDetails {
      .init(bundle: bundle)
    }
    func posts(bundle: Foundation.Bundle) -> posts {
      .init(bundle: bundle)
    }
    func signUp(bundle: Foundation.Bundle) -> signUp {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.addOrEditPost.validate()
      try self.launchScreen.validate()
      try self.login.validate()
      try self.postDetails.validate()
      try self.posts.validate()
      try self.signUp.validate()
    }


    /// Storyboard `AddOrEditPost`.
    struct addOrEditPost: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AddOrEditPost"

      var addOrEditPostController: RswiftResources.StoryboardViewControllerIdentifier<AddOrEditPostController> { .init(identifier: "AddOrEditPostController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if addOrEditPostController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addOrEditPostController' could not be loaded from storyboard 'AddOrEditPost' as 'AddOrEditPostController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "employees", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'employees' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Login`.
    struct login: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = LoginController

      let bundle: Foundation.Bundle

      let name = "Login"

      var loginController: RswiftResources.StoryboardViewControllerIdentifier<LoginController> { .init(identifier: "LoginController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "employees", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'employees' is used in storyboard 'Login', but couldn't be loaded.") }
        if loginController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginController' could not be loaded from storyboard 'Login' as 'LoginController'.") }
      }
    }

    /// Storyboard `PostDetails`.
    struct postDetails: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "PostDetails"

      var postDetailsController: RswiftResources.StoryboardViewControllerIdentifier<PostDetailsController> { .init(identifier: "PostDetailsController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "info-overlay-profpic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'info-overlay-profpic' is used in storyboard 'PostDetails', but couldn't be loaded.") }
        if postDetailsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'postDetailsController' could not be loaded from storyboard 'PostDetails' as 'PostDetailsController'.") }
      }
    }

    /// Storyboard `Posts`.
    struct posts: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Posts"

      var postsController: RswiftResources.StoryboardViewControllerIdentifier<PostsController> { .init(identifier: "PostsController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if postsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'postsController' could not be loaded from storyboard 'Posts' as 'PostsController'.") }
      }
    }

    /// Storyboard `SignUp`.
    struct signUp: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SignUp"

      var signupController: RswiftResources.StoryboardViewControllerIdentifier<SignupController> { .init(identifier: "SignupController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if signupController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signupController' could not be loaded from storyboard 'SignUp' as 'SignupController'.") }
      }
    }
  }
}