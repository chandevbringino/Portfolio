//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 1 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ic-back`.
    var icBack: RswiftResources.ImageResource { .init(name: "ic-back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `RandomUserTableCell`.
    var randomUserTableCell: RswiftResources.NibReferenceReuseIdentifier<RandomUserTableCell, RandomUserTableCell> { .init(name: "RandomUserTableCell", bundle: bundle, identifier: "RandomUserTableCell") }

    func validate() throws {

    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `RandomUserTableCell`.
    let randomUserTableCell: RswiftResources.ReuseIdentifier<RandomUserTableCell> = .init(identifier: "RandomUserTableCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var randomUserDetails: randomUserDetails { .init(bundle: bundle) }
    var randomUsers: randomUsers { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func randomUserDetails(bundle: Foundation.Bundle) -> randomUserDetails {
      .init(bundle: bundle)
    }
    func randomUsers(bundle: Foundation.Bundle) -> randomUsers {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.randomUserDetails.validate()
      try self.randomUsers.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `RandomUserDetails`.
    struct randomUserDetails: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "RandomUserDetails"

      var randomUserDetailsController: RswiftResources.StoryboardViewControllerIdentifier<RandomUserDetailsController> { .init(identifier: "RandomUserDetailsController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if randomUserDetailsController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'randomUserDetailsController' could not be loaded from storyboard 'RandomUserDetails' as 'RandomUserDetailsController'.") }
      }
    }

    /// Storyboard `RandomUsers`.
    struct randomUsers: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "RandomUsers"

      var randomUsersController: RswiftResources.StoryboardViewControllerIdentifier<RandomUsersController> { .init(identifier: "RandomUsersController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if randomUsersController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'randomUsersController' could not be loaded from storyboard 'RandomUsers' as 'RandomUsersController'.") }
      }
    }
  }
}